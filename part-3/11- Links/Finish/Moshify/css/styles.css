:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
}

/* Typography */

html {
  /* 62.5% of 16px browser default font size sets 1rem as 10px, facilitating simple rem calculations across the project */
  font-size: 62.5%;
}

body {
  font-family: Inter, Arial, Helvetica, sans-serif;
  font-size: 2.4rem;
  line-height: 1.5;
  color: var(--color-body);
}

h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
}

h1 {
  font-size: 7rem;
}

h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
}

p {
  margin-top: 0;
}

@media screen and (min-width: 1024px) {
  body {
    font-size: 1.8rem;
  }

  h1 {
    font-size: 8rem;
  }

  h2 {
    font-size: 4rem;
  }

  h3 {
    font-size: 2.4rem;
  }
}

a {
  text-decoration: none;
}

/* Links */
.link-arrow {
  /* 1. Set link color to the accent color variable; start designing for mobile first, then override if necessary with desktop-specific rules */
  color: var(--color-accent);

  /* 2. Convert link texts to uppercase for stylistic consistency and readability */
  text-transform: uppercase;

  /* 3. Define base font size for link on mobile screens */
  font-size: 2rem;

  /* 4. Apply bold weight to emphasize importance and distinguish links visually */
  font-weight: bold;
}

.link-arrow::after {
  /* 5. Add an arrow indicator after the link's text using the pseudo-element '::after';
          Utilizing a pseudo-element instead of direct HTML content promotes separation of style (CSS) and content (HTML),
          and helps better maintainability and scalability.
          Use fixed pixel unit (px) for the gap between text and arrow to ensure consistent spacing regardless of responsive scaling. */

  /*
      - The text part: `"learn more"` — this is your actual link content and it's directly styled through your `.link-arrow` class.
      - The arrow part: `"-->"` — This is created separately using the CSS pseudo-element `::after`. It behaves as a separate element
        so it has its own styling rules like margin, padding, animations, and transitions. */
  content: "->";
  margin-left: 5px;

  /* 7. Define a smooth transition for animating the margin move;
          adding a transition here instantly prepares CSS to animate any future change to the margin property smoothly.
          This subtle animation provides a pleasant visual interaction for users. */
  transition: margin 0.15s;
}

/* 6. On hover, increase margin on left side of arrow to visually move it slightly right,
      providing a clear and intuitive hover-state feedback to users */
.link-arrow:hover::after {
  margin-left: 10px;
}

/*
8. Create desktop-specific link styling rules separately within a component-specific media query for better maintainability.
   Avoid placing these rules in the global media query above to prevent scattered rules and improve readability,
   making styles easy to locate and edit per component.
*/
@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }

  .link-arrow::after {
    margin-left: 10px;
  }

  .link-arrow:hover::after {
    margin-left: 15px;
  }
}
